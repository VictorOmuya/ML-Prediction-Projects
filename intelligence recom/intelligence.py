# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'intelligence.ui'
#
# Created by: PyQt5 UI code generator 5.15.6
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets

import func
import pandas as pd
import pickle
from sklearn.preprocessing import LabelEncoder
from sklearn.preprocessing import StandardScaler
import pickle
import numpy as np

import math
from sklearn import neighbors, datasets
from numpy.random import permutation

class Ui_admision(object):
    
    def mess(self, title, message):
        mess = QtWidgets.QMessageBox()
        mess.setWindowTitle(title)
        mess.setText(message)
        mess.setStandardButtons(QtWidgets.QMessageBox.Ok)
        mess.exec_()
    
    def sit(self, x):
        if x == '1 sitting':
            return 1
        elif x == '2 sittings':
            return 0.5
        
    def euclideanDistance(self, data1, data2, length):
        distance = 0
        for x in range(length):
            distance += np.square(data1[x] - data2[x])
        return np.sqrt(distance)
    
    def knn(self, trainingSet, testInstance, k):
        
        distances = {}
        sort = {}
        length = testInstance.shape[1]
        for x in range(len(trainingSet)):
            dist = self.euclideanDistance(testInstance, trainingSet.iloc[x], length)
            distances[x] = dist[0]
    
        sorted_d = sorted(distances.items(), key=lambda x: x[1])
        neighbors = []
        for x in range(k):
            neighbors.append(sorted_d[x][0])
        classVotes = {}
        for x in range(len(neighbors)):
            response = trainingSet.iloc[neighbors[x]][-1]
            if response in classVotes:
                classVotes[response] += 1
            else:
                classVotes[response] = 1
        sortedVotes = sorted(classVotes.items(), key=lambda x: x[1], reverse=True)
        return(sortedVotes, neighbors)
    
    def recommend(self):
        data2 = pd.read_excel("course_data.xlsx")
        data2 = data2[data2['Admission status'] == 'Yes']
        
        jamb = self.txt_jamb.text()
        postjamb = self.txt_post.text()
        credit = self.txt_credits.text()
        dept = self.cmb_dept.currentText()
        sitting = self.cmb_olevel.currentText()
        if sitting == '1 sitting':
            s = 1
        elif sitting == '2 sittings':
            s = 0.5
        
        course_list = list(set(data2['course'].tolist()))
        #print(course_list)
        for i in range(len(course_list)):
            if(len(data2[data2['course'] == course_list[i]]) < 2):
                data2 = data2[data2['course'] != course_list[i]]
        data2 = data2.dropna()

        data2.drop('Admission status', axis=1, inplace = True)
        
        
        random_indices = permutation(data2.index)
        test_cutoff = math.floor(len(data2)/5)
        #print(test_cutoff)
        test = data2.loc[random_indices[1:test_cutoff]]
        train = data2.loc[random_indices[test_cutoff:]]
        train_output_data = train['course']
        #print("train Output data", train_output_data)
        train_input_data = train
        train_input_data = train_input_data.drop('course',axis=1)
        #print("train input data", train_input_data)
        test_output_data = test['course']
        #print("test Output data", test_output_data)
        test_input_data = test
        test_input_data = test_input_data.drop('course',1)
        #print("test input data", test_input_data)
        
        testSet = [[s, int(credit), int(jamb), int(postjamb)]]
        print(testSet)
        test = pd.DataFrame(testSet)
        test.shape
        
        k = 7

        result,neigh= self.knn(data2, test, k)
        
        list1 = []
        list2 = []
        for i in result:
            list1.append(i[0])
            list2.append(i[1])
            
        return list1
                
        
    def predictor(self):
        data_import = pd.read_excel("course_data.xlsx")
        
        data_import.drop(['Admission status'], axis=1, inplace = True)
        
        jamb = self.txt_jamb.text()
        postjamb = self.txt_post.text()
        credit = self.txt_credits.text()
        dept = self.cmb_dept.currentText()
        sitting = self.cmb_olevel.currentText()
        
        
        table = pd.DataFrame([[sitting, credit , jamb, postjamb, dept]], columns = ['sittings', 'credits', 'jamb_score', 'post_jamb_score','course'])  
        table['sittings'] = table['sittings'].apply(self.sit)
        
        new_table = pd.concat([data_import, table], axis = 0)
        
        
        lb = LabelEncoder()
        new_table['course'] = lb.fit_transform(new_table['course'])
        
        sc = StandardScaler()
        Xsc = sc.fit_transform(new_table)
        
        X_sc = pd.DataFrame(Xsc, columns = [['sittings', 'credits', 'jamb_score', 'post_jamb_score', 'course']] )
        
        filename = 'intellect.sav'
        loaded_model = pickle.load(open(filename, 'rb'))
        
        ypred = loaded_model.predict(X_sc)
       
        if ypred[-1] == 1:
            self.mess("intellect", "You will get admission into the department!")
        elif ypred[-1] == 0:
            course_list = self.recommend()
            if dept in course_list:
            
                course_list.remove(dept)
            courses = ' ,'.join(course_list)
            
            result = "You  might not get an admission into the department of your choice\n \
                Kindly check our recommendation below: \n\n\n{}".format(courses)
            self.mess("intellect", result)
            
            
        filename = "clicks.txt"
       
        with open(filename,'r+') as f:
            myDataList = int(f.readlines()[0])
            
            myDataList+=1
            
            txt_file = open("clicks.txt", "w")
            n = txt_file.write(str(myDataList))
            txt_file.close()
            print(n)
            
    def setupUi(self, admision):
        admision.setObjectName("admision")
        admision.resize(542, 148)
        self.bglabel = QtWidgets.QLabel(admision)
        self.bglabel.setGeometry(QtCore.QRect(0, 0, 721, 141))
        self.bglabel.setText("")
        self.bglabel.setObjectName("bglabel")
        self.btn_label = QtWidgets.QLabel(admision)
        self.btn_label.setGeometry(QtCore.QRect(0, 90, 721, 81))
        self.btn_label.setObjectName("btn_label")
        self.btn_pred = QtWidgets.QPushButton(admision)
        self.btn_pred.setGeometry(QtCore.QRect(370, 100, 161, 41))
        font = QtGui.QFont()
        font.setBold(True)
        font.setWeight(75)
        self.btn_pred.setFont(font)
        self.btn_pred.setObjectName("btn_pred")
        self.btn_pred.clicked.connect(self.predictor)
        
        self.cmb_dept = QtWidgets.QComboBox(admision)
        self.cmb_dept.setGeometry(QtCore.QRect(10, 30, 161, 22))
        self.cmb_dept.setObjectName("cmb_dept")
        self.cmb_dept.addItem("ACCOUNTANCY")
        self.cmb_dept.addItem("AGRIC ENG/TECH")
        self.cmb_dept.addItem("AGRIC TECH")
        self.cmb_dept.addItem("ARCHITECTURAL TECH")
        self.cmb_dept.addItem("ARTS AND DESIGN")
        self.cmb_dept.addItem("BANKING AND FINANCE")
        self.cmb_dept.addItem("BUILDING TECH")
        self.cmb_dept.addItem("BUSINESS ADMIN")
        self.cmb_dept.addItem("CHEMICAL ENG.")   
        self.cmb_dept.addItem("CIVIL ENG.")
        self.cmb_dept.addItem("COMPUTER ENGINEERING")
        self.cmb_dept.addItem("COMPUTER SCIENCE")
        self.cmb_dept.addItem("ELECT/ELECT ENG.")
        self.cmb_dept.addItem("ESTATE MANAGEMENT")
        self.cmb_dept.addItem("FISHERIES TECHNOLOGY")
        self.cmb_dept.addItem("FOOD TECHNOLOGY")
        self.cmb_dept.addItem("HORTICULTURAL TECH")
        self.cmb_dept.addItem("INSURANCE")
        self.cmb_dept.addItem("LEISURE/TOURISM")
        self.cmb_dept.addItem("MARKETING")
        self.cmb_dept.addItem("MASS COMMUNICATION")
        self.cmb_dept.addItem("MECHANICAL ENG TECH")
        self.cmb_dept.addItem("MECHATRONICS ENG")
        self.cmb_dept.addItem("OFFICE TECH")
        self.cmb_dept.addItem("QUANTITY SURVEYING")
        self.cmb_dept.addItem("SCIENCE LAB. TECH")
        self.cmb_dept.addItem("STATISTICS")
        self.cmb_dept.addItem("URBAN/REGIONAL PLANNING")
        
        self.cmb_olevel = QtWidgets.QComboBox(admision)
        self.cmb_olevel.setGeometry(QtCore.QRect(10, 110, 161, 22))
        self.cmb_olevel.setObjectName("cmb_olevel")
        self.cmb_olevel.addItem("1 sitting")
        self.cmb_olevel.addItem("2 sittings")
        
        self.label = QtWidgets.QLabel(admision)
        self.label.setGeometry(QtCore.QRect(10, 90, 141, 21))
        self.label.setObjectName("label")
        
        self.label_5 = QtWidgets.QLabel(admision)
        self.label_5.setGeometry(QtCore.QRect(190, 10, 141, 21))
        self.label_5.setObjectName("label_5")
        
        self.label_6 = QtWidgets.QLabel(admision)
        self.label_6.setGeometry(QtCore.QRect(10, 10, 141, 21))
        self.label_6.setObjectName("label_6")
        
        self.label_7 = QtWidgets.QLabel(admision)
        self.label_7.setGeometry(QtCore.QRect(370, 10, 141, 21))
        self.label_7.setObjectName("label_7")
        
        self.label_8 = QtWidgets.QLabel(admision)
        self.label_8.setGeometry(QtCore.QRect(190, 90, 141, 21))
        self.label_8.setObjectName("label_8")
        
        self.txt_jamb = QtWidgets.QLineEdit(admision)
        self.txt_jamb.setGeometry(QtCore.QRect(190, 30, 161, 21))
        self.txt_jamb.setObjectName("txt_jamb")
        
        self.txt_credits = QtWidgets.QLineEdit(admision)
        self.txt_credits.setGeometry(QtCore.QRect(190, 110, 161, 21))
        self.txt_credits.setObjectName("txt_credits")
        
        self.txt_post = QtWidgets.QLineEdit(admision)
        self.txt_post.setGeometry(QtCore.QRect(370, 30, 161, 21))
        self.txt_post.setObjectName("txt_post")

        self.retranslateUi(admision)
        QtCore.QMetaObject.connectSlotsByName(admision)

    def retranslateUi(self, admision):
        _translate = QtCore.QCoreApplication.translate
        admision.setWindowTitle(_translate("admision", "Intelligence rec"))
        self.btn_label.setText(_translate("admision", ""))
        self.btn_pred.setText(_translate("admision", "PREDICT ADMISSION"))
        self.label.setText(_translate("admision", "number of sittings in 0-level"))
        self.label_5.setText(_translate("admision", "jamb score"))
        self.label_6.setText(_translate("admision", "course of study"))
        self.label_7.setText(_translate("admision", "post jamb score"))
        self.label_8.setText(_translate("admision", "number of 0-level credits"))


if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    admision = QtWidgets.QDialog()
    ui = Ui_admision()
    ui.setupUi(admision)
    admision.show()
    sys.exit(app.exec_())
