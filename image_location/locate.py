# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'qts\locate.ui'
#
# Created by: PyQt5 UI code generator 5.15.6
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.



from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtWidgets import QApplication,QWidget, QVBoxLayout, QPushButton, QFileDialog , QLabel, QTextEdit, QMessageBox
import sys
from PyQt5.QtGui import QPixmap

import pandas as pd
import pickle

from exif import Image
import webbrowser
from time import sleep
import datetime
import reverse_geocoder as rg
import pycountry

class Ui_locate_image(object):
    
    def messages(self, title, message):
        mess = QMessageBox()
        mess.setWindowTitle(title)
        mess.setText(message)
        mess.setStandardButtons(QMessageBox.Ok)
        mess.exec_()
    
    def getImage(self):
        
        fname = QFileDialog.getOpenFileName()
        self.imagePath = fname[0]
        #self.lbl_imgtext.setText(self.imagePath)
        
        pixmap = QPixmap(self.imagePath)
        self.lblimg.setPixmap(QPixmap(pixmap))
        self.lblimg.setScaledContents(True)
            #self.resize(pixmap.width(), pixmap.height())
    
     
    def predict(self):
        try:
            img_path = self.imagePath
            
            with open(img_path, "rb") as palm_1_file:
                palm_1_image = Image(palm_1_file)
                images = [palm_1_image]
                
            for index, image in enumerate(images):
                if image.has_exif:
                    status = "contains exif"
                else:
                    status = "does not contain any EXIF information."
                
               
            image_members = []
    
            for image in images:
                image_members.append(dir(image))
    
            for index, image_member_list in enumerate(image_members):
                pass
                #print(f"Image {index} contains {len(image_member_list)} members:")
                #print(f"{image_member_list}\n")
                
                if  "gps_longitude" not in image_member_list:
                    
                    self.messages("location", "cant get the location of this image")
                    
                else:
                    
                    for index, image in enumerate(images):
                        if "datetime_original" not in image_member_list:
                            self.lblres1.setText(" date/time: "+ datetime.today())
                        
                        else:
                        
                            self.lblres1.setText(" date/time: "+image.datetime_original)
                            
                    for index, image in enumerate(images):
                        decimal_latitude = self.dms_coordinates_to_dd_coordinates(image.gps_latitude, image.gps_latitude_ref)
                        decimal_longitude = self.dms_coordinates_to_dd_coordinates(image.gps_longitude, image.gps_longitude_ref)
                        coordinates = (decimal_latitude, decimal_longitude)
                        location_info = rg.search(coordinates)[0]
                        location_info['country'] = pycountry.countries.get(alpha_2=location_info['cc'])
                        #print(f"{location_info}\n")
                        self.lblres2.setText(" town: "+ location_info['name'])
                        self.lblres3.setText(" state: "+ location_info['admin1'])
                        
                   
                    #for index, image in enumerate(images):
                        #print(f"Coordinates - Image {index}")
                        #print(f"Latitude: {image.gps_latitude} {image.gps_latitude_ref}")
                        #print(f"Longitude: {image.gps_longitude} {image.gps_longitude_ref}\n")
                            
                        
                    #for index, image in enumerate(images):
                        
                        #print(f"Latitude (DMS): {self.format_dms_coordinates(image.gps_latitude)} {image.gps_latitude_ref}")
                        #print(f"Longitude (DMS): {self.format_dms_coordinates(image.gps_longitude)} {image.gps_longitude_ref}\n")
                        #print(f"Latitude (DD): {self.dms_coordinates_to_dd_coordinates(image.gps_latitude, image.gps_latitude_ref)}")
                        #print(f"Longitude (DD): {self.dms_coordinates_to_dd_coordinates(image.gps_longitude, image.gps_longitude_ref)}\n")
                    
                    for index, image in enumerate(images):
                        sleep(10)
                        self.draw_map_for_location(image.gps_latitude, 
                              image.gps_latitude_ref, 
                              image.gps_longitude,
                              image.gps_longitude_ref)
        except:
            self.messages("error", "ensure you have an image uploaded")
    
    def format_dms_coordinates(self, coordinates):
       pass
       return f"{coordinates[0]}Â° {coordinates[1]}\' {coordinates[2]}\""
            
    def dms_coordinates_to_dd_coordinates(self, coordinates, coordinates_ref):
        
        decimal_degrees = coordinates[0] + \
                      coordinates[1] / 60 + \
                      coordinates[2] / 3600
    
        if coordinates_ref == "S" or coordinates_ref == "W":
            decimal_degrees = -decimal_degrees
    
        return decimal_degrees
    
    
    def draw_map_for_location(self, latitude, latitude_ref, longitude, longitude_ref):
        
        decimal_latitude = self.dms_coordinates_to_dd_coordinates(latitude, latitude_ref)
        decimal_longitude = self.dms_coordinates_to_dd_coordinates(longitude, longitude_ref)
        self.url = f"https://www.google.com/maps?q={decimal_latitude},{decimal_longitude}"
        sleep(5)
        
    
    def open_browser(self):
        try:
            
            webbrowser.open_new_tab(self.url)
        except:
            self.messages("error", "no link to pass")
        
    
    def setupUi(self, locate_image):
        locate_image.setObjectName("locate_image")
        locate_image.resize(623, 236)
        self.lblback = QtWidgets.QLabel(locate_image)
        self.lblback.setGeometry(QtCore.QRect(0, 0, 621, 231))
        self.lblback.setObjectName("lblback")
        
        self.lblimg = QtWidgets.QLabel(locate_image)
        self.lblimg.setGeometry(QtCore.QRect(190, 30, 231, 181))
        self.lblimg.setStyleSheet("background-color: rgb(255, 255, 255);")
        self.lblimg.setObjectName("lblimg")
        
        self.cmdbrowse = QtWidgets.QPushButton(locate_image)
        self.cmdbrowse.setGeometry(QtCore.QRect(10, 40, 151, 61))
        font = QtGui.QFont()
        font.setFamily("News706 BT")
        font.setPointSize(11)
        font.setBold(True)
        font.setWeight(75)
        self.cmdbrowse.setFont(font)
        self.cmdbrowse.setStyleSheet("color: rgb(255, 255, 255);\n"
"background-color: rgb(185, 0, 0);")
        self.cmdbrowse.setObjectName("cmdbrowse")
        self.cmdbrowse.clicked.connect(self.getImage)
        
        self.cmdlocate = QtWidgets.QPushButton(locate_image)
        self.cmdlocate.setGeometry(QtCore.QRect(10, 140, 151, 61))
        font = QtGui.QFont()
        font.setFamily("News706 BT")
        font.setPointSize(11)
        font.setBold(True)
        font.setWeight(75)
        self.cmdlocate.setFont(font)
        self.cmdlocate.setStyleSheet("color: rgb(255, 255, 255);\n"
"background-color: rgb(185, 0, 0);")
        self.cmdlocate.setObjectName("cmdlocate")
        self.cmdlocate.clicked.connect(self.predict)
        
        self.cmdgo = QtWidgets.QPushButton(locate_image)
        self.cmdgo.setGeometry(QtCore.QRect(537, 8, 75, 23))
        font = QtGui.QFont()
        font.setFamily("News706 BT")
        font.setPointSize(8)
        font.setBold(True)
        font.setWeight(50)
        self.cmdgo.setFont(font)
        self.cmdgo.setStyleSheet("color: red);\n"
"background-color: rgb(59, 59, 59);")
        self.cmdgo.setObjectName("cmdbrowse")
        self.cmdgo.clicked.connect(self.open_browser)
        
        self.lblres1 = QtWidgets.QLabel(locate_image)
        self.lblres1.setGeometry(QtCore.QRect(450, 40, 161, 31))
        self.lblres1.setStyleSheet("background-color: rgb(185, 0, 0);\n"
"color: rgb(255, 255, 255);")
        self.lblres1.setObjectName("lblres1")
        
        self.lblres2 = QtWidgets.QLabel(locate_image)
        self.lblres2.setGeometry(QtCore.QRect(450, 106, 161, 30))
        self.lblres2.setStyleSheet("background-color: rgb(185, 0, 0);\n"
"color: rgb(255, 255, 255);")
        self.lblres2.setObjectName("lblres2")
        
        self.lblres3 = QtWidgets.QLabel(locate_image)
        self.lblres3.setGeometry(QtCore.QRect(450, 170, 161, 31))
        self.lblres3.setStyleSheet("background-color: rgb(185, 0, 0);\n"
"color: rgb(255, 255, 255);")
        self.lblres3.setObjectName("lblres3")
 

        self.retranslateUi(locate_image)
        QtCore.QMetaObject.connectSlotsByName(locate_image)

    def retranslateUi(self, locate_image):
        _translate = QtCore.QCoreApplication.translate
        locate_image.setWindowTitle(_translate("locate_image", "locate image"))
        self.lblback.setText(_translate("locate_image", ""))
        self.lblimg.setText(_translate("locate_image", ""))
        self.cmdbrowse.setText(_translate("locate_image", "BROWSE IMAGE"))
        self.cmdlocate.setText(_translate("locate_image", "LOCATE IMAGE"))
        self.cmdgo.setText(_translate("locate_image", "see map"))
        self.lblres1.setText(_translate("locate_image", ""))
        self.lblres2.setStyleSheet(_translate("locate_image", "background-color: rgb(185, 0, 0);\n"
"color: rgb(255, 255, 255);"))
        self.lblres2.setText(_translate("locate_image", ""))
        self.lblres3.setStyleSheet(_translate("locate_image", "background-color: rgb(185, 0, 0);\n"
"color: rgb(255, 255, 255);"))
        self.lblres3.setText(_translate("locate_image", ""))


if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    locate_image = QtWidgets.QDialog()
    ui = Ui_locate_image()
    ui.setupUi(locate_image)
    locate_image.show()
    sys.exit(app.exec_())
