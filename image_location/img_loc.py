# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file './pyQts/brainTum.ui'
#
# Created by: PyQt5 UI code generator 5.15.0
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtWidgets import QApplication,QWidget, QVBoxLayout, QPushButton, QFileDialog , QLabel, QTextEdit, QMessageBox
import sys
from PyQt5.QtGui import QPixmap

import pandas as pd
import pickle

from exif import Image
import webbrowser

class Ui_Dialog(object):
    
    
    def messages(self, title, message):
        mess = QMessageBox()
        mess.setWindowTitle(title)
        mess.setText(message)
        mess.setStandardButtons(QMessageBox.Ok)
        mess.exec_()
    
    def getImage(self):
        
        fname = QFileDialog.getOpenFileName()
        self.imagePath = fname[0]
        self.lbl_imgtext.setText(self.imagePath)
        
        pixmap = QPixmap(self.imagePath)
        self.lbl_image.setPixmap(QPixmap(pixmap))
        self.lbl_image.setScaledContents(True)
            #self.resize(pixmap.width(), pixmap.height())
    
     
    def predict(self):
        #try:
        img_path = self.imagePath
        
        with open(img_path, "rb") as palm_1_file:
            palm_1_image = Image(palm_1_file)
            images = [palm_1_image]
            
        for index, image in enumerate(images):
            if image.has_exif:
                status = "contains exif"
            else:
                status = "does not contain any EXIF information."
            print(status)
           
        image_members = []

        for image in images:
            image_members.append(dir(image))

        for index, image_member_list in enumerate(image_members):
            print(f"Image {index} contains {len(image_member_list)} members:")
            print(f"{image_member_list}\n")
            
            if  "gps_longitude" not in image_member_list:
                print("cant get the location of this image")
                
            else:
               
                for index, image in enumerate(images):
                    #print(f"Coordinates - Image {index}")
                    print(f"Latitude: {image.gps_latitude} {image.gps_latitude_ref}")
                    print(f"Longitude: {image.gps_longitude} {image.gps_longitude_ref}\n")
                        
                    
                for index, image in enumerate(images):
                    print(f"Coordinates - Image {index}")
                    
                    print(f"Latitude (DMS): {self.format_dms_coordinates(image.gps_latitude)} {image.gps_latitude_ref}")
                    print(f"Longitude (DMS): {self.format_dms_coordinates(image.gps_longitude)} {image.gps_longitude_ref}\n")
                    print(f"Latitude (DD): {self.dms_coordinates_to_dd_coordinates(image.gps_latitude, image.gps_latitude_ref)}")
                    print(f"Longitude (DD): {self.dms_coordinates_to_dd_coordinates(image.gps_longitude, image.gps_longitude_ref)}\n")

                for index, image in enumerate(images):
                    self.draw_map_for_location(image.gps_latitude, 
                          image.gps_latitude_ref, 
                          image.gps_longitude,
                          image.gps_longitude_ref)
     #except:
         #self.messages("error", "ensure the image is a valid brain image")
    
    def format_dms_coordinates(self, coordinates):
       pass
       return f"{coordinates[0]}Â° {coordinates[1]}\' {coordinates[2]}\""
            
    def dms_coordinates_to_dd_coordinates(self, coordinates, coordinates_ref):
        
        decimal_degrees = coordinates[0] + \
                      coordinates[1] / 60 + \
                      coordinates[2] / 3600
    
        if coordinates_ref == "S" or coordinates_ref == "W":
            decimal_degrees = -decimal_degrees
    
        return decimal_degrees
    
    
    def draw_map_for_location(self, latitude, latitude_ref, longitude, longitude_ref):
        decimal_latitude = self.dms_coordinates_to_dd_coordinates(latitude, latitude_ref)
        decimal_longitude = self.dms_coordinates_to_dd_coordinates(longitude, longitude_ref)
        url = f"https://www.google.com/maps?q={decimal_latitude},{decimal_longitude}"
        webbrowser.open_new_tab(url)
           
       
        
    def setupUi(self, Dialog):
        Dialog.setObjectName("Dialog")
        Dialog.resize(570, 234)
        self.lbl_image = QtWidgets.QLabel(Dialog)
        self.lbl_image.setGeometry(QtCore.QRect(20, 20, 211, 171))
        self.lbl_image.setObjectName("lbl_image")
        self.lbl_image.setStyleSheet("background-color: rgb(96, 54, 103);")
        
        self.btn_browse = QtWidgets.QPushButton(Dialog)
        self.btn_browse.setGeometry(QtCore.QRect(19, 200, 211, 23))
        font = QtGui.QFont()
        font.setFamily("Forte")
        font.setPointSize(9)
        self.btn_browse.setFont(font)
        self.btn_browse.setObjectName("btn_browse")
        self.btn_browse.clicked.connect(self.getImage)
        self.btn_browse.setStyleSheet("color: rgb(96, 54, 103);")
        
        self.btn_check = QtWidgets.QPushButton(Dialog)
        self.btn_check.setGeometry(QtCore.QRect(310, 60, 191, 101))
        font = QtGui.QFont()
        font.setFamily("Cooper Black")
        font.setPointSize(12)
        self.btn_check.setFont(font)
        self.btn_check.setObjectName("btn_check")
        self.btn_check.clicked.connect(self.predict)
        self.btn_check.setStyleSheet("color: rgb(96, 54, 103);")
        
        self.lbl_backDown = QtWidgets.QLabel(Dialog)
        self.lbl_backDown.setGeometry(QtCore.QRect(0, 196, 571, 31))
        self.lbl_backDown.setText("")
        self.lbl_backDown.setObjectName("lbl_backDown")
        
        self.lbl_result = QtWidgets.QLabel(Dialog)
        self.lbl_result.setGeometry(QtCore.QRect(270, 199, 281, 21))
        font = QtGui.QFont()
        font.setFamily("Cooper Black")
        font.setPointSize(9)
        self.lbl_result.setFont(font)
        self.lbl_result.setText("")
        self.lbl_result.setAlignment(QtCore.Qt.AlignCenter)
        self.lbl_result.setObjectName("lbl_result")
        
        self.lbl_imgtext = QtWidgets.QLabel(Dialog)
        self.lbl_imgtext.setGeometry(QtCore.QRect(270, 20, 281, 21))
        self.lbl_imgtext.setObjectName("lbl_imgtext")
        self.lbl_imgtext.setHidden(True)
        
        
        self.lbl_backDown.raise_()
        self.lbl_image.raise_()
        self.btn_browse.raise_()
        self.btn_check.raise_()
        self.lbl_result.raise_()
        self.lbl_imgtext.raise_()

        self.retranslateUi(Dialog)
        QtCore.QMetaObject.connectSlotsByName(Dialog)

    def retranslateUi(self, Dialog):
        _translate = QtCore.QCoreApplication.translate
        Dialog.setWindowTitle(_translate("Dialog", "image location"))
        self.lbl_image.setText(_translate("Dialog", ""))
        self.btn_browse.setText(_translate("Dialog", "BROWSE IMAGE"))
        self.btn_check.setText(_translate("Dialog", "LOCATE IMAGE"))
        self.lbl_imgtext.setText(_translate("Dialog", ""))


if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    Dialog = QtWidgets.QDialog()
    ui = Ui_Dialog()
    ui.setupUi(Dialog)
    Dialog.show()
    sys.exit(app.exec_())
